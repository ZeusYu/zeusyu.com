<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[ZeusYu的秘密基地]]></title>
  <link href="http://ZeusYu.github.com/zeusyu/atom.xml" rel="self"/>
  <link href="http://ZeusYu.github.com/zeusyu/"/>
  <updated>2012-01-20T00:00:00+08:00</updated>
  <id>http://ZeusYu.github.com/zeusyu/</id>
  <author>
    <name><![CDATA[ZeusYu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[用ruby/tk玩桌面程序]]></title>
    <link href="http://ZeusYu.github.com/zeusyu/blog/tk-for-ruby.html"/>
    <updated>2012-08-22T21:57:00+08:00</updated>
    <id>http://ZeusYu.github.com/zeusyu/blog/tk-for-ruby</id>
    <content type="html"><![CDATA[<p>最近写了一些ruby脚本，完成一些小功能，觉得颇为上瘾。不过，运行的时候老要在命令行终端里输入各种参数，用起来不是很方便，还是觉得有个桌面程序比较方便，于是我就想着怎么改造已有的脚本，把它做成一个易用的桌面程序来玩玩。找来找去，ruby还是有不少桌面框架工具支持的，tk就是个不错的选择，简单易用。</p>

<!--more-->


<p>改造的准备工作非常简单：</p>

<ol>
<li><p>安装ruby，windows下的一键安装包非常好使，还自带了Ruby/Tk，不用再找额外的ruby扩展就能调用tk开发程序了。</p></li>
<li><p>安装tk， <a href="http://www.activestate.com/activetcl/downloads">ActiveState</a>提供了所有常见平台上的Tcl/Tk二进制安装包，直接下载安装即可，也没什么需要设置的</p></li>
</ol>


<p>配置完环境，就能进行开发了，先起个基本窗口</p>

<pre class='sh_ruby'><code>require 'rubygems'  
</code><code>require 'tk'  
</code><code>Tk = TkRoot.new{
</code><code>   title 'Hello world'
</code><code>}  
</code><code>Tk.mainloop</code></pre>


<p>
通过“TkRoot.new”构造主窗口对象，之后调用“Tk.mainloop”启动主事件循环创建整个图形界面，正常情况下，一个标题为“Hello World”的窗口就出现了。</p>

<p>当然，窗口仅仅是个开始，一个可用的桌面程序，少不了各种各样的输入框、按钮，Ruby/TK提供了许多类来实现小部件，譬如TkButton,TkLabel,TkEntry等等，创建部件的时候，必须给它指定父对象，如之前创建的这个窗口</p>

<pre class='sh_ruby'><code>require 'rubygems'  
</code><code>require 'tk'  
</code><code>Tk = TkRoot.new{
</code><code>   title 'Hello world'
</code><code>}  
</code><code>TkButton.new(Tk){
</code><code>   text '戳我！'
</code><code>}
</code><code>Tk.mainloop</code></pre>


<p>
以上示例就是在窗口中添加了一个按钮，其中“text &#8216;戳我！&#8217;”是替按钮设置的属性。（在这边插一句，本来，还可以通过哈希表的形式设置部件的属性，但我觉得这样比较好看，让我有种html+css的即视感）</p>

<p>好，有了按钮，我们是不是该做些什么交互操作呢，点击按钮，让按钮上的文字发生变化吧。修改按钮部件的代码块</p>

<pre class='sh_ruby'><code>button = TkButton.new(Tk){
</code><code>   text '戳我!'
</code><code>   command {
</code><code>       button.text = '戳得我好爽！'
</code><code>   }
</code><code>}</code></pre>


<p>
哦也，程序动起来了。</p>

<p>当然，Ruby/Tk有另外的绑定事件的方式，
<code>button.bind('Enter'){button.text = '鼠标进来了'}</code><br/>
这种方式更灵活，也更体现“放置一个部件，绑上一些动作”这样的理念。</p>

<p>一个程序，不肯只有一个按钮，部件一多，必然涉及到布局问题，tk有三种布局方式</p>

<ol>
<li>place方式绝对定位。<code>place('height'=&gt;50,'width'=&gt; '100','x'=&gt;20,'y'=&gt;40)</code></li>
<li>grid方式表格定位。<code>grid(row'=&gt;1,'column'=&gt; 1)</code></li>
<li>pack填空方式。<code>pack('side'=&gt;'top','fill'=&gt;'both')</code></li>
</ol>


<p>其中pack填空方式比较灵活。按照顺序执行程序创建部件时，会根据pack的参数，把部件填入窗口中的剩余空白。具体可参考这个图</p>

<pre class='sh_ruby'><code>require 'tk'
</code><code>
</code><code>title_text=&quot;pack 方式示例程序&quot;
</code><code>root=TkRoot.new{title title_text}
</code><code>
</code><code>TkButton.new(root, 'text'=&gt;'按钮1').pack('side'=&gt;'top','fill'=&gt;'both')
</code><code>TkButton.new(root, 'text'=&gt;'按钮2').pack('side'=&gt;'left','fill'=&gt;'both')
</code><code>TkButton.new(root, 'text'=&gt;'按钮3').pack('side'=&gt;'bottom','fill'=&gt;'both')
</code><code>TkButton.new(root, 'text'=&gt;'按钮4').pack('side'=&gt;'right','fill'=&gt;'both')
</code><code>TkButton.new(root, 'text'=&gt;'按钮5').pack('side'=&gt;'top','fill'=&gt;'both')
</code><code>
</code><code>Tk.mainloop
</code><code>}</code></pre>


<p>
<img src="http://www.ibm.com/developerworks/cn/opensource/os-cn-rubytk/packer.jpg" alt="tk pack布局" /><br/>
实际操作的时候pack方法与frame部件配合使用，效果更佳。</p>

<p>关于Ruby/Tk的可用的部件及其具体属性，<a href="http://www.tutorialspoint.com/ruby/ruby_tk_guide.htm">Ruby/Tk Guide</a>上有着更为详细的说明。</p>

<p>在具体操作中，需要注意的是，Tk提供一个特殊TkVariable.new方法来创建变量，在不同部件间传递信息，这对减少全局变量的使用非常有帮助。</p>

<p>程序写完了，我突然发现一个问题，这用ruby写的东西怎么分发呢？用户那边可没有ruby环境啊，对于一般windows用户而言，我们还得增加一个环节，生成exe文件。由于一般情况下没什么人用ruby写可执行文件，这方面的东西比较少，但幸运的是，我们找到了ocra（One-Click Ruby Application）。</p>

<p>作为一个ruby2exe的工具，它安装起来非常简单<code>gem install ocra</code>即可。</p>

<p>安装完成之后，在终端中执行以下命令，完成打包工作<br/>
<code>ocra [ruby/tk path] --add-all-core --windows --no-autoload --gem-full  [rb file]</code><br/>
关于ocra，<a href="http://ocra.rubyforge.org/">这里</a>有更详细的介绍。</p>

<p>最后是我的两个渣程序，再难看也还是摆出来吧。<br/>
<a href="https://github.com/ZeusYu/QRCode-Mass-Producters">https://github.com/ZeusYu/QRCode-Mass-Producters</a><br/>
<a href="https://github.com/ZeusYu/eDoc_OpenCourse_Generator">https://github.com/ZeusYu/eDoc_OpenCourse_Generator</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用ruby批量制作二维码]]></title>
    <link href="http://ZeusYu.github.com/zeusyu/blog/creat-qrcode-by-ruby.html"/>
    <updated>2012-05-28T20:59:00+08:00</updated>
    <id>http://ZeusYu.github.com/zeusyu/blog/creat-qrcode-by-ruby</id>
    <content type="html"><![CDATA[<p>随着移动互联网和智能手机的迅猛发展，<a href="http://en.wikipedia.org/wiki/QRcode">QRCode</a>作为一种常见的二维码，也越来越多得被应用于各个场所。最近，公司这边有个业务需要用到大量的QRcode，对于这个简单的应用，也没必要麻烦开发人员，直接搞起~</p>

<p>制作QRcode其实说起来也容易，本质上就是将一些文本，按照约定好的格式，编码成图形（比如最近大热的二维码名片，其实就是用<a href="http://en.wikipedia.org/wiki/Vcard">vCard</a>的格式将个人信息编码），在与实际应用二维码的具体程序开发人员约定好内容格式（就是一个字符串，用逗号分隔不同信息）后就可以开始二维码的制作了。</p>

<!--more-->


<p>制作二维码有很多种方法：</p>

<ol>
<li><p>使用网上多如牛毛的在线工具</p></li>
<li><p>使用网上下载到的本地工具</p></li>
<li><p>调用谷歌的<a href="https://developers.google.com/chart/infographics/">在线api</a></p></li>
</ol>


<p>但这几种方法都有各自的不足。</p>

<ol>
<li><p>在线工具大多都应用于更简单的场景，用于制作少量二维码，方便在于内置了多种约定好的格式，但对于批量生产缺乏支持</p></li>
<li><p>找来找去，能下载到的批量生产工具基本上都是一个软件，虽然能生成二维码，但是由于设置极为坑爹，导致生成的图片一来尺寸过小，而来还存在中文乱码的情况，因此也只能放弃。</p></li>
<li><p>调用谷歌的在线api看上去是个不错的选择，只要写两句简单的函数调用，就能达到批量生成二维码的目的，可惜托方校长的福，程序需要挂个vpn或者代理才能稳定工作，这显然不够方便。</p></li>
</ol>


<p>所以，我们选择了第4种方案，上<a href="rubygems.org">rubygems.org</a>找现成的gem包（别怪我懒，代码盲真心看不懂QRcode的编码算法），哇，万能的ruby社区提供了许多相关的gem包，有生成QRcode的<a href="http://rubygems.org/gems/rqrcode">rqrcode</a>，更有直接将生成的QRcode转存成png图片的<a href="http://rubygems.org/gems/rqrcode_png">rqrcode_png</a>，万事具备，开始。
首先，先把需要转成QRcode的用户信息保存在123.csv文件中，一行一个用户，各个信息间用“,”分隔。</p>

<pre class='sh_ruby'><code>require 'rubygems'
</code><code>require 'url_safe_base64' #用于加密手机号码，避免直接通过扫描二维码获得导致的用户个人信息泄露
</code><code>require 'rqrcode_png'
</code><code>names = []
</code><code>mobiles = []
</code><code>hospital = []
</code><code>major = []
</code><code>zc = []
</code><code>File.readlines('123.csv').each do |line| #逐行读入用户信息
</code><code>  a = line.split(',')
</code><code>  xm.push(a[0])
</code><code>  yy.push(a[1])
</code><code>  ks.push(a[2])
</code><code>  zc.push(a[3])
</code><code>  dh.push(a[4]) #将不同类型的用户数据压入数组的不同位置
</code><code>end
</code><code>
</code><code>dh.each_with_index do|v,k|
</code><code>  qr = RQRCode::QRCode.new(&quot;#{xm[k]},#{yy[k]},#{ks[k]},#{zc[k]},&quot;+Base64.encode64(v),:size =&gt; 5,:level =&gt; :l) #size、level是QRcode的配置，根据需求可做调整（level：l,m,q,h;size&lt;=14）
</code><code>  png = qr.to_img #生成图片
</code><code>  png.resize(320,320).save(&quot;/Users/maclion/Desktop/QRcode/#{xm[k]}.png&quot;) #保存图片
</code><code>end</code></pre>


<p>运行一下，就在桌面QRcode目录下生成了一大对二维码图片。</p>

<p>当然，事情永远不会那么简单，以上代码在ruby1.9.3下报错，说是文件编码有问题，但是换了ruby1.8.7环境却跑通了，这点说啥我也想不通，留作以后再考虑吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[4月21日的50公里大暴走]]></title>
    <link href="http://ZeusYu.github.com/zeusyu/blog/baozou.html"/>
    <updated>2012-04-23T20:59:00+08:00</updated>
    <id>http://ZeusYu.github.com/zeusyu/blog/baozou</id>
    <content type="html"><![CDATA[<p>去年从同事那边得知有这个活动的存在，于是便在今年组队参与了本次活动。之前曾经走过一次5公里大概在45分钟到一小时左右，所以觉得走完这50公里大概是个不可能完成的任务，但春夏之际，和同事一道外出走走，看看风景、看看妹子倒也是件美事。<br/>
活动要求我们早上6点在城市规划馆东面集合，用大巴把参加活动这2000多号人运到起点朱家角。<br/>
<img src="http://www.hi-pda.com/forum/attachments/day_120422/1204221651494609d8944a5756.jpg" alt="" /><br/>
参加活动的人很多，主办方也考虑到现场可能会出意外，动用了大量义工，往返于参加活动的人员之间，照顾撤退的童鞋、鼓励仍在继续的同志。（这边吐个槽，这里，我莫名奇妙地想到一道小学数学题，两个人面对面走，中间有条狗来回跑，问，当两人相遇时，狗跑了多少路？这样想有些贬低这些义工同志的说，罪过罪过……）<br/>
<img src="http://www.hi-pda.com/forum/attachments/day_120422/1204221658e2040b001e73011f.jpg" alt="" /><br/>
在一个简单的启动仪式之后（这个时候，我们非常实际地在一边排队领水、打卡），活动正式开始，大部队浩浩荡荡地出发了，沿着既定路线开始了暴走~<br/>
整个暴走路线是个环线，共6个记录点，分别是0公里（起点）、13公里、27公里、35公里、43公里、50公里(终点),前几个点走得比较顺畅，大家一路有说有笑，看到前方有MM背影不错也都能兴奋地跑上去偷看（不过最后认定是背影杀手），这种美好一直持续了30多公里。经过35公里这个点以后，大家明显感到有些力有不逮，一位同事在40公里左右终于支撑不住了，由于肌肉拉伤，撤下战线。在这之后，我也开始有些顶不住了，这个时候，我不得不开始后悔平时不锻炼，搞得一身的肥膘，再加上扁平足，搞得我足底疼痛难忍，大腿两侧也疼得不行，几乎是迈不动步了，也讲不动什么笑话了，绝望中，看着周边小姑娘们居然还蹦蹦跳跳得往前走，不得不咬咬牙继续往前走。
最后在晚上7点半左右，终于熬到了终点，好吧，从没想到能走完这50公里到完成，这也算是挑战自我成功了吧，这个过程，真得感谢春哥和他的ex，要不是他们的坚持，我估计也很难走到终点。<br/>
最终，我们一行8人中，有5人完成了50公里，成为了完成活动的500人中的一部分，我们的队伍，也为这次暴走的公益活动募捐了2000多元。（咦，好像没提过这是个公益活动啊，这个活动的由头就是利用暴走，借打赌的名义为贫困地区的孩子午饭捐个鸡蛋）。 <br/>
这里是小队的链接<a href="http://bz.lianquan.org.cn/team/%E7%BF%BC%E5%A4%9AeDoctor">http://bz.lianquan.org.cn/team/翼多eDoctor</a><br/>
这里是我的打卡记录<a href="http://bz.lianquan.org.cn/member/%E7%BF%BC%E5%A4%9AAeDoctor/bob.zhou">http://bz.lianquan.org.cn/member/翼多eDoctor/bob.zhou</a></p>

<p>再来一张暴走过程中的图片吧：<br/>
<img src="http://c592786.r86.cf2.rackcdn.com/registered/4974/2012/04/30/25395.jpeg" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mac下ruby环境搭建]]></title>
    <link href="http://ZeusYu.github.com/zeusyu/blog/change-computer.html"/>
    <updated>2012-04-18T21:47:00+08:00</updated>
    <id>http://ZeusYu.github.com/zeusyu/blog/change-computer</id>
    <content type="html"><![CDATA[<p>前一阵子换了新电脑，一直在忙其他的事情，再加上贪玩打了一遍《质量效应3》，把程序方面的学习给落下了。这会儿稍稍空点了，还是继续上路吧。
换了电脑以后，之前熟悉的windows不见了，遇上了据说很方便的mac，什么都得重头搞起，第一件事就是架环境。听说用rvm安装ruby很方便，于是搜了个教程跟着做。</p>

<!--more-->


<h2>1.安装git</h2>

<p>前往<a href="http://code.google.com/p/git-osx-installer/downloads/list?can=3&amp;q=&amp;sort=-uploaded&amp;colspec=Filename+Summary+Uploaded+Size+DownloadCount">http://code.google.com/p/git-osx-installer/</a>下载Git，直接搞个dmg包，打开安装即可，整个过程算是最顺利的了。</p>

<h2>2.安装rvm</h2>

<p>在终端里执行<br/>
<code>bash &lt; &lt;( curl http://rvm.beginrescueend.com/releases/rvm-install-head )</code><br/>
为了能在只能在终端中使用，照着教程在用户配置文件/Users/username/.profile里加上了<br/>
<code>[[ -s "$HOME/.rvm/scripts/rvm" ]] &amp;&amp; . "$HOME/.rvm/scripts/rvm"  # This loads RVM into a shell session.</code></p>

<h2>3.安装Xcode</h2>

<p>本来根据找到的教程是没有这一步的，但是我用rvm的命令安装ruby时，总是无法编译，看了日志才知道是mac系统太高，lion下没有GCC造成的，原本想单独下一个，但是由于水平太低，对这玩意儿不熟，没敢搞，还是安安稳稳下个xcode吧。<br/>
这里，我抱着追新的态度，下了xcode 4.3.2，安装后发现还是无法编译，借了个开发者账号下了command line tools 都不管用。唉还是不折腾了，最后还是卸掉了4.3.2的版本，装了xcode4.1，这才算过了编译。</p>

<h2>4.安装ruby</h2>

<p>重启终端后，就开始用rvm装ruby了
<code>rvm install 1.9.3</code></p>

<p>本来，到这里ruby环境算是搞定了。但是当我进入irb开始试用的时候发现，在终端里输入中文遇到点问题，无论怎么输，就是不能正常显示，不是显示utf码，就是啥都没有。又得拜托谷歌大神了。根据说明得依靠readline。在终端里输入<br/>
<code>rvm pkg install readline</code><br/>
<code>rvm reinstall 1.9.3 --with-readline-dir=$rvm_path/usr</code><br/>
重新编译了一遍，这才解决了这个问题。</p>

<p>余下的设定默认ruby版本<br/>
<code>rvm use ruby 1.9.2 -default</code><br/>
更新rubygems<br/>
<code>rubygems gem update --systme</code><br/>
修改Rubygems的源<br/>
<code>gem sources --remove http://rubygems.org/</code><br/>
<code>gem sources -a http://ruby.taobao.org/</code></p>

<p>好吧，千辛万苦之后算是在mac下配好了基本环境。rails啥的还是放在以后再研究吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[小修改]]></title>
    <link href="http://ZeusYu.github.com/zeusyu/blog/little-change.html"/>
    <updated>2012-03-22T22:29:00+08:00</updated>
    <id>http://ZeusYu.github.com/zeusyu/blog/little-change</id>
    <content type="html"><![CDATA[<p>这两天趁着新鲜劲，对博客做了些小小的改动。</p>

<ol>
<li>左侧增加了google+的链接图标</li>
<li>用<a href="http://duoshuo.com/">多说</a>取代<a href="http://disqus.com">Disqus</a>作为博客的评论系统</li>
<li>正式把域名<a href="http://zeusyu.com," title="zeusyu.com">ZeusYu.com</a>指了过来。</li>
</ol>


<p>增加图标本来很容易，根据模板的写法，在<code>\.themes\blog\source\_includes\social-links.html</code>和<code>_config.yml</code>里增加对应的代码，但麻烦在于为了保持图标的一致性，我得搞一个相同风格的svg文件，在网上遍寻不到的情况下，只好硬着头皮搜索了一下AI的简单用法，自己画了一个，勉强凑上，刚把图放上去的时候，图标的位置有些诡异，在<code>\.themes\blog\sass\screen.scss</code>里增加相关的样式以后才正常，以后要继续增加其他图标，如法炮制即可。</p>

<p>至于更换评论系统，完全是因为<a href="http://smalloranges.net">九间</a>童鞋的建议，毕竟我们能不能登录<a href="http://disqus.com">Disqus</a>开始评论，完全要看方校长的G.F.W心情如何。虽然<a href="http://duoshuo.com/">多说</a>也存在这一些小毛病（修改个人资料有点问题、彻底删除评论没反应，不知道是不是偶然，过几天再看看），但至少主要功能还算正常，先这样吧。</p>

<p><a href="http://zeusyu.com%EF%BC%8C" title="zeusyu.com">ZeusY.com</a>指过来以后，原先在<a href="http://tumblr.com">Tumblr</a>上的博客就只能用二级域名<a href="http://zeusyu.tumblr.com/">ZeusYu.tumblr.com</a>了,上面难得有几篇对自己之前工作有些帮助的东西也懒得搬过来了，以后看着更新吧~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[像黑客一样写博客]]></title>
    <link href="http://ZeusYu.github.com/zeusyu/blog/hello-world.html"/>
    <updated>2012-03-20T21:00:00+08:00</updated>
    <id>http://ZeusYu.github.com/zeusyu/blog/hello-world</id>
    <content type="html"><![CDATA[<p>标题摘自网上对Octopress的评价。自从从同事那里得知了有这么一个东西的存在以后，出于对免费事物的莫名爱好和对之前自己写的乱七八糟东西的不满，一直想在GitHub上重头搭一个博客玩玩，但由于才疏学浅，完全写不来前端代码，只能看着同事的博客心痒痒。正好，前几天同事开源了他的博客主题，于是，直接拿来用，在这里，谢谢<a href="http://mrzhang.me/" title="wǒ_is神仙">wǒ_is神仙</a>童鞋。</p>

<!--more-->


<p>这边搭建的版本是基于<a href="http://mrzhang.me/" title="wǒ_is神仙">wǒ_is神仙</a>童鞋<a href="https://github.com/jsw0528/octopress/tree/mrzhang_me/">Fork的Octopress</a>，与原始版本的的区别如下：</p>

<ol>
<li><p><a href="https://github.com/jsw0528/octopress/blob/mrzhang_me/.rvmrc">.Rvmrc</a><br/>
神仙同学用的是Ruby1.9.3，Octopress最低要求1.9.2</p></li>
<li><p><a href="https://github.com/jsw0528/octopress/blob/mrzhang_me/Gemfile">Gemfile</a><br/>
源改成了ruby.taobao.org的，去掉了部分gem的版本号限制</p></li>
<li><p><a href="https://github.com/jsw0528/octopress/blob/mrzhang_me/Rakefile">Rakefile</a><br/>
用haml替换了markdown，修改了时区，降低主题对custom目录的依赖</p></li>
<li><p><a href="https://github.com/jsw0528/octopress/blob/mrzhang_me/_config.yml">_config.yml</a><br/>
定制化配置信息，日期格式、永久链接、微博等等</p></li>
<li><p><a href="https://github.com/jsw0528/octopress/blob/mrzhang_me/plugins/sh_js.rb">Plugins/sh_js.rb</a><br/>
代码高亮插件</p></li>
<li><p><a href="https://github.com/jsw0528/octopress/blob/mrzhang_me/plugins/tag_generator.rb">Plugins/tag_generator.rb</a><br/>
支持中文的Tag插件</p></li>
<li><p><a href="https://github.com/jsw0528/octopress/blob/mrzhang_me/.themes/blog/">.Themes/blog/</a><br/>
神仙同学的博客主题</p></li>
</ol>


<p>但是，处于我本地的一些情况和个人使用习惯还是对它做了点改动，</p>

<p>在.rvmrc文件中修改了ruby版本</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rvm use 1.9.2</span></code></pre></td></tr></table></div></figure>


<p>在Rakefile中换回了markdown</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>new_post_ext = "markdown"
</span><span class='line'>new_page_ext = "markdown"</span></code></pre></td></tr></table></div></figure>


<p>（咦，怎么有种绕弯子的感觉……）</p>

<p>安装、部署博客还是比较简单的，无非是先用git把神仙同学的代码迁到本地，修修改改之后放到github上，绑个域名就OK了。这方面，<a href="http://mrzhang.me/blog/blog-equals-github-plus-octopress.html">wǒ_is神仙的博客</a> 上已经有比较详细的介绍了，这里我也不再摘抄了。<br/>
但是-作为一个老土的windows用户，在本地运行博客的过程中我还是遇到了不少的问题。</p>

<ol>
<li><p><code>bundle install</code> 失败<br/>
这里的问题主要是由于我对Octorpress的不了解造成的因为Octorpess有一个gem是需要从github上迁下来的，而我本地没有相关的工具支持。通过在本地安装配置git客户端，这个问题得到了解决</p></li>
<li><p><code>rake new_post</code>后<code>rake generate</code> 失败<br/>
这是windows上跑Ruby的老问题了,由于我写博客的时候用了中文，编码问题又冒了出来。解决方法有两步，先设定windows的环境变量，增加</p></li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>LANG=zh_CN.UTF-8
</span><span class='line'>LC=zh_CN.UTF-8</span></code></pre></td></tr></table></div></figure>


<p>再把生成的markdown文件存为utf8格式（UTF-8无BOM编码格式）。</p>

<p>（我在网上查找过有关Octorpress的一些材料，据说在windows下还有许许多多的问题，不过目前我还没有碰到其他比较恶心的毛病，如果有的话，到时候继续想办法搞定吧）
好了，新博客搭好了，我也算迈入“黑客”的行列了吧，嗯，要开始认真地写些东西了。</p>
]]></content>
  </entry>
  
</feed>
